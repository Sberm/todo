#!/usr/bin/python3
import re
import argparse
from datetime import datetime
from sys import exit

VERSION = r"0.0.4"

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-a", "--all", default = False, action = "store_true", help = "print all tasks")
    parser.add_argument("-i", "--input", default = "todo.txt", help = "default: todo.txt, path to the todo file", metavar = "file")
    parser.add_argument("-p", "--pending", default = False, action = "store_true", help = "only show pending tasks")
    parser.add_argument("-v", "--version", default = False, action = "store_true", help = "print current version")
    parser.add_argument("-d", "--date", default = False, action = "store_true", help = "print dates")

    args = parser.parse_args()

    if args.version:
        print(f"pending version {VERSION}")
        exit(0)

    todo_file = args.input
    only_pending = args.pending
    print_today = not args.all
    print_date = args.date
    f = None

    try:
        f = open(todo_file, "r")
    except:
        print(f"failed to open todo file \"{todo_file}\"")
        exit(1)

    # regex for date (TODO: Add length restrictions, for example [0-9]{4} or sth)
    date_pat = re.compile(r"^([0-9]+-[0-9]+-[0-9]+).*$")
    completion_pat = re.compile(r"^\[OK\]")
    half_completion_pat = re.compile(r"^\[O\]")
    rmv_st_whsp_pat = re.compile(r"^[ \t]*(.*)$")
    rmv_cmt_pat = re.compile(r"^([^#]*)#.*$")

    # (date, time)
    pending = []
    completed = []

    date_format = "%Y-%m-%d"

    __today = datetime.today()
    today = datetime(__today.year, __today.month, __today.day)
    date_tmp = today

    lines = f.readlines()
    f.close()

    append = ""

    for line in lines:
        line_whsp = rmv_st_whsp_pat.match(line)
        line = line_whsp.group(1).strip("\n\r")
        if line_cmt := rmv_cmt_pat.match(line):
            line = line_cmt.group(1)

        if len(line) == 0 or line.isspace():
            continue

        # get the date and go to the next line
        if date_match := date_pat.match(line):
            date_tmp = datetime.strptime(date_match.group(1), date_format)
        else:
            # only print today's todo items, skip
            # why continue but not break: today's date can come later than the passed days if
            # user is not careful
            if print_today and date_tmp != today:
                continue

            # multi-line
            if line[-1] == '\\':
                append += line[:-1] # exclude the backslash
                continue

            # first non-backslash-ended item: build the result
            if len(append) != 0:
                line = append + line
                append = ""

            if completion_pat.match(line):
                if not only_pending:
                    completed.append((date_tmp, line))
            else:
                pending.append((date_tmp, line))

    # avoid extra newlines
    if len(pending) == 0 and len(completed) == 0:
        print("No todo items found")
        return

    # pending (not completed)
    print()
    print("\033[0;31m", end="")

    for task in pending:
        if print_today and task[0] < today:
            break
        half_completion_pos = half_completion_pat.match(task[1])
        s = "  "
        if print_date:
            s += f"{task[0].strftime(date_format)} "
        if half_completion_pos:
            s += "\033[0;32m" + "[O]" + "\033[0;31m" + task[1][3:]
        else:
            s += task[1]
        print(s)

    print("\033[0;0m", end="")

    # completed
    printed = False
    print("\033[0;32m", end="")

    for task in completed:
        if print_today and task[0] < today:
            break

        # if any completed tasks need printing, print newline first
        if not printed:
            print()

        printed = True
        s = "  "
        if print_date:
            s += f"{task[0].strftime(date_format)} "
        s += f"{task[1]}"
        print(s)

    print("\033[0;0m", end="")
    print()

if __name__ == "__main__":
    main()
