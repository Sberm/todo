#!/usr/bin/python3
import re
import argparse
from datetime import datetime
from sys import exit

VERSION = r"0.0.1"

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-a", "--all", default = False, action = "store_true", help = "print all tasks")
    parser.add_argument("-i", "--input", default = "todo.txt", help = "default: todo.txt, path to the todo file", metavar = "file")
    parser.add_argument("-p", "--pending", default = False, action = "store_true", help = "only show pending tasks")
    parser.add_argument("-v", "--version", default = False, action = "store_true", help = "print current version")

    args = parser.parse_args()

    if args.version:
        print(f"pending version {VERSION}")
        exit(0)

    todo_file = args.input
    only_pending = args.pending
    print_today = not (args.all or only_pending)

    with open(todo_file, "r") as f:
        # regex for date (TODO: Add length restrictions, for example [0-9]{4} or sth)
        date_pat = re.compile(r"^[0-9]+-[0-9]+-[0-9]+")
        completion_pat = re.compile(r"^[ \t]*\[OK\]")
        half_completion_pat = re.compile(r"^[ \t]*\[O\]")
        comment_pat = re.compile(r"^[ \t]*#")

        # (date, time)
        pending = []
        completed = []

        date_format = "%Y-%m-%d"

        __today = datetime.today()
        today = datetime(__today.year, __today.month, __today.day)
        date_tmp = today

        lines = f.readlines()
        append = ""

        for line in lines:
            if line.isspace():
                continue

            line = line.strip("\n\r")

            # get the date and go to the next line
            if date_pat.search(line):
                date_tmp = datetime.strptime(line, date_format)
            else:
                # only print today's todo items, skip
                if print_today and date_tmp != today:
                    continue

                # skip comments
                if comment_pat.search(line):
                    continue

                # multi-line
                if line[-1] == '\\':
                    append += line[:-1] # exclude the backslash
                    continue

                # first non-backslash-ended item: build the result
                if append != "":
                    line = append + line
                    append = ""

                if completion_pat.search(line):
                    if not only_pending:
                        completed.append((date_tmp, line))
                else:
                    pending.append((date_tmp, line))

        # avoid extra newlines
        if len(pending) == 0 and len(completed) == 0:
            print("No todo items found")
            return

        # pending (not completed)
        print()
        print("\033[0;31m", end="")

        for task in pending:
            if print_today and task[0] < today:
                break
            half_completion_pos = half_completion_pat.search(task[1])
            if half_completion_pos:
                print("  ", task[0].strftime(date_format), " ",
                      task[1][:half_completion_pos.start()] + "\033[0;32m" + "[O]"
                      + "\033[0;31m" + task[1][half_completion_pos.end():],
                      sep="")
            else:
                print("  ", task[0].strftime(date_format), " ", task[1], sep="")

        print("\033[0;0m", end="")

        # completed
        printed = False
        print("\033[0;32m", end="")

        for task in completed:
            if print_today and task[0] < today:
                break

            # if any completed tasks need printing, print newline first
            if not printed:
                print()

            printed = True
            print("  ", task[0].strftime(date_format), " ", task[1], sep="")

        print("\033[0;0m", end="")

        print()

if __name__ == "__main__":
    main()
